import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import { FileSpreadsheet, X } from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";

interface AttendanceFileDropZoneProps {
  onFilesSelected: (files: File[]) => void;
  files: File[];
  title: string;
  onRemove: (index: number) => void;
}

const AttendanceFileDropZone: React.FC<AttendanceFileDropZoneProps> = ({
  onFilesSelected,
  files,
  title,
  onRemove,
}) => {
  const [isError, setIsError] = useState(false);

  const onDrop = useCallback(
    async (acceptedFiles: File[]) => {
      const validFiles: File[] = [];
      for (const file of acceptedFiles) {
        try {
          const reader = new FileReader();
          const text = await new Promise<string>((resolve, reject) => {
            reader.onload = (e) => resolve(e.target?.result as string);
            reader.onerror = () => reject("Error reading file");
            reader.readAsText(file);
          });

          const rows = text.split("\n");
          if (rows.length <= 1) {
            toast.error(
              `CSV file "${file.name}" is empty or contains only the header`,
            );
            setIsError(true);
            setTimeout(() => {
              setIsError(false);
            }, 500);
            continue;
          }

          const header = rows[0].split(",").map((cell) => cell.trim());
          if (header.length < 7 || header[6] !== "validator.piceamslogs") {
            toast.error(
              `Invalid CSV format in "${file.name}". Please ensure the attendance log was generated by the system and never modified.`,
            );
            setIsError(true);
            setTimeout(() => {
              setIsError(false);
            }, 500);
            continue;
          }

          validFiles.push(file);
        } catch (error) {
          console.error(`Error validating CSV "${file.name}":`, error);
          toast.error(`Error validating CSV "${file.name}"`);
          setIsError(true);
          setTimeout(() => {
            setIsError(false);
          }, 500);
        }
      }

      if (validFiles.length > 0) {
        onFilesSelected(validFiles);
      }
    },
    [onFilesSelected],
  );

  const onDropRejected = useCallback((fileRejections: any) => {
    if (fileRejections.length > 0) {
      toast.error("Invalid file type. Only CSV files are allowed.");
      setIsError(true);
      setTimeout(() => {
        setIsError(false);
      }, 1000);
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    onDropRejected,
    accept: {
      "text/csv": [".csv"],
    },
  });

  const shakeClass = isError ? "animate-shake" : "";

  return (
    <div className="space-y-2">
      <div
        {...getRootProps()}
        className={`border-2 border-dashed rounded-lg cursor-pointer transition-colors p-4 flex items-center justify-center gap-4
                ${isError ? "border-red-500 bg-red-100" : "hover:border-primary hover:bg-accent/50"}
                ${shakeClass}
                 `}
        style={{ minHeight: "70px" }}
      >
        <input {...getInputProps()} />
        <FileSpreadsheet className="h-10 w-10 text-muted-foreground" />
        <span className="text-sm text-muted-foreground">
          {`Drag and drop Attendance Log here, or click to select files`}
        </span>
      </div>
      <div className="space-y-2">
        {files.map((file, index) => (
          <div
            key={index}
            className="flex items-center justify-between p-2 border rounded"
          >
            <span className="text-sm truncate">{file.name}</span>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => {
                onRemove(index);
              }}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default AttendanceFileDropZone;
