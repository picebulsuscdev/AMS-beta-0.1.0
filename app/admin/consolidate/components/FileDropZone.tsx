import React, { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import { FileSpreadsheet, X } from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";

interface FileDropZoneProps {
  onFileSelected: (file: File) => void;
  file: File | null;
  errorMessage?: string;
  title: string;
  onRemove: () => void;
}

const FileDropZone: React.FC<FileDropZoneProps> = ({
  onFileSelected,
  file,
  title,
  onRemove,
  errorMessage,
}) => {
  const [isError, setIsError] = useState(false);

  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      if (acceptedFiles.length > 0) {
        const file = acceptedFiles[0];
        const reader = new FileReader();

        reader.onload = (e) => {
          try {
            const text = e.target?.result as string;
            const rows = text.split("\n");
            if (rows.length <= 1) {
              toast.error("CSV file is empty or contains only the header");
              setIsError(true);
              setTimeout(() => {
                setIsError(false);
              }, 500);
              return;
            }
            const header = rows[0].split(",").map((cell) => cell.trim());
            if (header.length < 4 || header[3] !== "validator.consolidate") {
              toast.error(
                "Invalid CSV format. Please ensure the consolidation file was generated by the system and never modified.",
              );
              setIsError(true);
              setTimeout(() => {
                setIsError(false);
              }, 1000);
              return;
            }

            onFileSelected(file);
          } catch (error) {
            console.error("Error validating CSV:", error);
            toast.error("Error validating CSV.");
            setIsError(true);
            setTimeout(() => {
              setIsError(false);
            }, 500);
          }
        };

        reader.readAsText(file);
      }
    },
    [onFileSelected],
  );

  const onDropRejected = useCallback((fileRejections: any) => {
    if (fileRejections.length > 0) {
      toast.error(fileRejections[0].errors[0].message);
      setIsError(true);
      setTimeout(() => {
        setIsError(false);
      }, 500);
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      "text/csv": [".csv"],
    },
    maxFiles: 1,
    disabled: !!file,
    onDropRejected: onDropRejected,
  });

  const shakeClass = isError ? "animate-shake" : "";

  return (
    <div>
      {!file ? (
        <div
          {...getRootProps()}
          className={`border-2 border-dashed rounded-lg cursor-pointer transition-colors  p-4 flex items-center justify-center gap-4
              ${isError ? "border-red-500 bg-red-100" : "hover:border-primary hover:bg-accent/50"}
               ${shakeClass}
             `}
          style={{ height: "100px", maxHeight: "70px", width: "100%" }}
        >
          <input {...getInputProps()} />
          <FileSpreadsheet className="h-10 w-10 text-muted-foreground" />
          <span className="text-sm text-muted-foreground">
            {`Drag and drop the consolidation file here, or click to select file`}
          </span>
        </div>
      ) : (
        <div className="flex items-center justify-between p-2 border rounded">
          <span className="text-sm truncate">{file.name}</span>
          <Button variant="ghost" size="icon" onClick={onRemove}>
            <X className="h-4 w-4" />
          </Button>
        </div>
      )}
      {errorMessage && (
        <p className="text-red-500 text-sm mt-1">{errorMessage}</p>
      )}
    </div>
  );
};

export default FileDropZone;
